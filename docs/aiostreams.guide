@database "aiostreams.guide"
@author "George (walkero) Sokianos"
@$VER: 1.2 (05.09.2019)     
@wordwrap
@font "DejaVu Sans Mono.font" 17
@node "MAIN" "aiostreams"
@next "Requirements"
@{jcenter}
    _    ___ ___      _                                
   / \\  |_ _/ _ \\ ___| |_ _ __ ___  __ _ _ __ ___  ___ 
  / _ \\  | | | | / __| __| '__/ _ \\/ _` | '_ ` _ \\/ __|
 / ___ \\ | | |_| \\__ \\ |_| | |  __/ (_| | | | | | \\__ \\
/_/   \\_\\___\\___/|___/\\__|_|  \\___|\\__,_|_| |_| |_|___/

@{b}All In One streams@{ub}
@{i}v1.2 (2019-09-05)@{ui}
@{jleft}@{lindent 3}@{rindent 3}
All In One streams (aiostreams) is a pack of scripts, written in Python, that can be used to stream and watch videos from different online networks, like Twitch.tv and Mixer.com.

These can be used from the shell, as well as from any web browser that support execution of scripts. It is really easy to configure a link context menu and open the URL with the script. And if "Autoplay" is enabled, then the video will start automatically.

Some of these networks support search, where you can find available streams and videos. Under the Usage section you can find the available features of each script and how to use them.

@{lindent 15}@{settabs 10}
@{"Requirements" LINK "Requirements"}
@{"Installation" LINK "Installation"}
@{"Configure" LINK "Configure"}
@{"Shell usage" LINK "Usage"}
@{tab}@{"Twitch.tv" LINK "Twitch.tv"}
@{tab}@{"Mixer.com" LINK "Mixer.com"}
@{tab}@{"Vimeo.com" LINK "Vimeo.com"}
@{tab}@{"Dailymotion.com" LINK "Dailymotion.com"}
@{tab}@{"Skaitv.gr" LINK "Skaitv.gr"}
@{"Todo List" LINK "Todo"}
@{"Changelog" LINK "Changelog"}
@{"Author" LINK "Author"}

@endnode
@node "Requirements" "Requirements"
@prev "MAIN"
@next "Installation"
@{jleft}@{lindent 3}
@{b}Requirements@{ub}

The scripts are based on Python v2.5, so this is absolutely necessary to be installed at your system.

They are developed and fully tested under AmigaOS 4.1 FE. There will be support for other systems in the future, like MorphOS, AmigaOS 3 and AROS, as long as Python is supported. 

The scripts might work under Linux and MacOS X, but those systems are not the target of this project. There are other solution that might do better work.

A full list:
* Python 2.5
* Pythonssl @{" 1 " SYSTEM "c:URLOpen http://os4depot.net/?function=showfile&file=library/misc/pythonssl.lha"}
* The Python modules: urllib, urllib2, sys, re, string, random. Usually they are part of the python Installation.
* ffplay for the online live streaming videos, or something equivalent. @{" 2 " SYSTEM "c:URLOpen http://os4depot.net/?function=showfile&file=video/convert/ffmpeg.lha"}
* mplayer for the online recorded videos, or something equivalent. @{" 3 " SYSTEM "c:URLOpen http://os4depot.net/index.php?function=search&tool=simple&f_fields=mplayer"}
* internet access

Links
[1] http://os4depot.net/?function=showfile&file=library/misc/pythonssl.lha
[2] http://os4depot.net/?function=showfile&file=video/convert/ffmpeg.lha
[3] http://os4depot.net/index.php?function=search&tool=simple&f_fields=mplayer


@endnode
@node "Installation" "Installation"
@prev "Requirements"
@next "Configure"
@{jleft}@{lindent 3}
@{b}Installation@{ub}

Unarchive the file wherever you want. It will work even from temporary mounted storage, i.e. USB, CDRom or RAM.

The scripts do not write anything to the disks, so they don't need the storage to be writable.

@endnode
@node "Configure" "Configure"
@prev "Installation"
@next "Usage"
@{jleft}@{lindent 3}
@{b}Configure@{ub}

In aiostreams folder you will find a configuration file named @{b}cfg.py@{ub}. You can edit it and change a few parameters, so that it will be suitable for you.

The available parameters are:
* @{b}autoplay:@{ub} Set this to @{i}True@{ui} to enable autoplay of the video with your preffered video player. Set it to @{i}False@{ui} to disable it.
* @{b}verbose:@{ub} Set this to @{i}True@{ui} to get more info from the script during the execution. Set it to @{i}False@{ui} to disable it.
* @{b}vPlayer:@{ub} Set the path to your preffered video player for recorded streams and not live streams. This is used only if @{b}autoplay@{ub} is set to @{i}True@{ui}.
* @{b}vPlayerArgs:@{ub} Set the arguments that are going to be used with your preffered video player. This is used only if @{b}autoplay@{ub} is set to @{i}True@{ui}.
* @{b}sPlayer:@{ub} Set the path to your preffered streaming player for live or recorded streams. This is used only if @{b}autoplay@{ub} is set to @{i}True@{ui}.
* @{b}sPlayerArgs:@{ub} Set the arguments that are going to be used with your preffered streaming player. This is used only if @{b}autoplay@{ub} is set to @{i}True@{ui}.
* @{b}twitchQualityWeight:@{ub} Set the preffered sort of video qualities for the Twitch.tv network. This means that the first available will be served.
* @{b}mixerQualityWeight:@{ub} Set the preffered sort of video qualities for the Mixer.com network. This means that the first available will be served.
* @{b}vimeoQualityWeight:@{ub} Set the preffered sort of video qualities for the Vimeo.com network. This means that the first available will be served.
* @{b}dailymotionQualityWeight:@{ub} Set the preffered sort of video qualities for the Dailymotion.com network. This means that the first available will be served.


@endnode
@node "Usage" "Shell usage"
@prev "Configure"
@next "Twitch.tv"
@{jleft}@{lindent 3}
@{b}Shell usage@{ub}

All the scripts have a common way of usage, and I am trying to keep it that way, so there can be a consistency. But scripts might have different features depending the suported network. 

You can find usage information in the following sections, separated by network.
@{lindent 10}
@{"Twitch.tv" LINK "Twitch.tv"}
@{"Mixer.com" LINK "Mixer.com"}
@{"Vimeo.com" LINK "Vimeo.com"}
@{"Dailymotion.com" LINK "Dailymotion.com"}
@{"Skaitv.gr" LINK "Skaitv.gr"}
@{lindent 3}
The scripts are developed to be used in shell, but some of their feature can be used inside a browser by adding actions to link menus that would use those scripts with the link URL. 

The problem right now is that the supported networks, like Twitch.tv, do not render right with the available browsers.

@endnode
@node "Twitch.tv" "Twitch.tv"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Twitch.tv@{ub}

This script supports @{"Twitch.tv" SYSTEM "c:URLOpen https://www.twitch.tv"} website and it's available API. 
If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. If not you can search for available streams with the parameter @{b}-sg, --search-game@{ub}.

With this script you can: 
* watch live streams
* watch channels' recorded videos
* search channels by game title that are live and streaming
* list available recorded videos by channel
* autoplay videos with ffplay or mplayer

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video/channel url from twitch.tv
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -sg SEARCHGAME, --search-game SEARCHGAME
                        Search for available streams based on game title
  -cv, --channel-videos
                        Request the recorded videos of a channel. The -u
                        argument is mandatory.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
The following list includes all the available video qualities. At the configuration file you can set the weighted sort of this list. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if exists in an other position in the list.

@{lindent 10}
Value @{tab} Resolution (may vary)
----------------------------------
chunked @{tab}@{tab} Usually this is the original video 
 @{tab}@{tab} quality or 1080p (1920x1080)
720p60 @{tab}@{tab} 1280x720 60fps
720p30 @{tab}@{tab} 1280x720 30fps
480p30 @{tab}@{tab} 720x480 30fps
360p30 @{tab}@{tab} 480x360 30fps
160p30 @{tab}@{tab} 284x160 30fps
audio_only @{tab}no video, audio only

@{lindent 3}
@{u}Examples:@{uu}
Watch a live channel streaming, like below
@{b}twitch.py -u https://www.twitch.tv/channelname@{ub}

Watch a recorded video, like below
@{b}twitch.py -u https://www.twitch.tv/videos/1234567890@{ub}

Watch a live channel streaming at specific video quality, if this is available, like below
@{b}twitch.py -u https://www.twitch.tv/channelname -q 720p30@{ub}

Search for a keyword or a game title. Include the value in double quotes, like below:
@{b}twitch.py -sg "game title"@{ub}

List the last 50 videos of a channel, like below
@{b}twitch.py -u https://www.twitch.tv/channelname -cv@{ub}

@{u}Privacy:@{uu}
The script uses HTTPS URLs to access the Twitch.tv API and shares with the network the following personal info:
* Your public IP

@endnode
@node "Mixer.com" "Mixer.com"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Mixer.com@{ub}

This script supports @{"Mixer.com" SYSTEM "c:URLOpen https://mixer.com"} website and it's available API. 
If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. If not you can search for available streams with the parameter @{b}-sg, --search-game@{ub}.

With this script you can: 
* watch live streams
* watch channels' recorded videos
* search channels by game title that are live and streaming
* get a list of the available recorded videos by channel
* get a list of the Top Streams and Top Games, based on the viewers
* autoplay videos with ffplay or mplayer

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video/channel url from mixer.com
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -ts, --top-streams    Get a list of the current Top Streams that are live
  -tg, --top-games      Get a list of the current Top Games that are live,
                        based on their viewers
  -sg SEARCHGAME, --search-game SEARCHGAME
                        Search for available streams based on game title
  -cv, --channel-videos
                        Request the recorded videos of a channel. The -u
                        argument is mandatory.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
The following list includes all the available video qualities. At the configuration file you can set the weighted sort of this list. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if exists in an other position in the list.

Usually, the recorded videos are available only on 720p resolution.

@{lindent 10}
Value @{tab} Resolution (may vary)
----------------------------------
1080p @{tab} 1920x1080 
720p @{tab} 1280x720
480p @{tab} 720x480
320p @{tab} 480x320
160p @{tab} 284x160

@{lindent 3}
@{u}Examples:@{uu}
Watch a live channel streaming, like below
@{b}mixer.py -u https://mixer.com/channelname@{ub}

Watch a recorded video, like below
@{b}mixer.py -u https://mixer.com/channelname?vod=1234567890@{ub}

Watch a live channel streaming at specific video quality, if this is available, like below
@{b}mixer.py -u https://mixer.com/channelname -q 720p@{ub}

Search for a keyword or a game title. Include the value in double quotes, like below:
@{b}mixer.py -sg "game title"@{ub}

List the last 50 videos of a channel, like below
@{b}mixer.py -u https://mixer.com/channelname -cv@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script to Mixer.com API.

@endnode
@node "Vimeo.com" "Vimeo.com"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Vimeo.com@{ub}

This script supports @{"Vimeo.com" SYSTEM "c:URLOpen https://vimeo.com"} website. If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. 

With this script you can: 
* watch recorded videos
* autoplay videos with ffplay or mplayer

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video url from vimeo.com
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
The following list includes all the available video qualities. At the configuration file you can set the weighted sort of this list. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if exists in an other position in the list.

Usually, the recorded videos are available only on 720p resolution.

@{lindent 10}
Value @{tab} Resolution (may vary)
----------------------------------
1080p @{tab} 1920x1080 
720p @{tab} 1280x720
540p @{tab} 960x540
480p @{tab} 720x480
360p @{tab} 480x360
240p @{tab} 284x160

@{lindent 3}
@{u}Examples:@{uu}
Watch a recorded video, like below
@{b}vimeo.py -u https://vimeo.com/categoty/channelname/1234567890@{ub}
@{b}vimeo.py -u https://vimeo.com/1234567890@{ub}

Watch a recorded video at specific video quality, if this is available, like below
@{b}vimeo.py -u https://vimeo.com/1234567890 -q 720p@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script to Vimeo.com.

@endnode
@node "Dailymotion.com" "Dailymotion.com"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Dailymotion.com@{ub}

This script supports @{"Dailymotion.com" SYSTEM "c:URLOpen https://www.dailymotion.com"} website. If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. 

With this script you can: 
* watch recorded videos
* autoplay videos with ffplay or mplayer

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video url from Dailymotion.com
  -q QUALITY, --quality QUALITY
                        Set the preffered video quality. This is optional. If
                        not set or if it is not available the default quality
                        weight will be used.
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
The following list includes all the available video qualities. At the configuration file you can set the weighted sort of this list. This means that the first available will be served. You can override the first one with the parameter @{b}-q, --quality@{ub}, even if exists in an other position in the list.

Usually, the recorded videos are available only on 720p resolution.

@{lindent 10}
Value @{tab} Resolution (may vary)
----------------------------------
1080 @{tab} 1920x1080 
720 @{tab} 1280x720
480 @{tab} 720x480
380 @{tab} 512x288
240 @{tab} 320x184
144 @{tab} 192x112

@{lindent 3}
@{u}Examples:@{uu}
Watch a recorded video, like below
@{b}dailymotion.py -u https://www.dailymotion.com/video/x7iifgh@{ub}

Watch a recorded video at specific video quality, if this is available, like below
@{b}dailymotion.py -u https://www.dailymotion.com/video/x7iifgh -q 720@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script to dailymotion.com.

@endnode
@node "Skaitv.gr" "Skaitv.gr"
@prev "Usage"
@{jleft}@{lindent 3}
@{b}Skaitv.gr@{ub}

This script supports @{"Skaitv.gr" SYSTEM "c:URLOpen http://www.skaitv.gr"} website. If you know the URL you can use it with the parameter @{b}-u, --url@{ub}. 

With this script you can: 
* watch recorded videos
* autoplay videos with ffplay or mplayer

@{u}Shell parameters:@{uu}
  -h, --help            show this help message and exit
  -u URL, --url URL     The video url from Skaitv.gr
  -shh, --silence       If this is set, the script will not output anything,
                        except of errors.

@{u}Available video qualities:@{uu}
Usually, the recorded videos are available only on 720p resolution and there is no way to choose a different one.

@{u}Examples:@{uu}
Watch a recorded video, like below
@{b}skaitv.py -u http://www.skaitv.gr/episode/psuchagogia/radio-arbula/2019-05-20-23@{ub}
@{b}skaitv.py -u http://www.skaitv.gr/episode/psuchagogia/radio-arbula/2019-05-20-23/radio-arbula-istories-agapis-20052019@{ub}

@{u}Privacy:@{uu}
No private info is sent by this script to Skaitv.gr.

@endnode
@node "Todo" "Todo"
@prev "Usage"
@next "Changelog"
@{jleft}@{lindent 3}
@{b}Todo list@{ub}

The todo list is something that might change a lot between the version releases. You can find the up to date todo list and the status of things I am working on, at:
https://github.com/walkero-gr/aiostreams/projects/1

Many things:
* MorphOS support. Actually I am waiting to get in my hands my Powebook G4.
* Reuters.tv support
* Support Emotion player, if possible.
* AmigaOS 3 and AROS support.
* A way to get a notification on which of your favorite channels are currently streaming.
* Add silence mode

If you have any websites that you would like to be supported, please contact me and I will check if this is possible. Please, don't ask for Amazon Prime, HBO, Netflix etc.. They do not provide the necessary APIs to be used outside their websites.

@endnode
@node "Changelog" "Changelog"
@prev "Todo"
@next "Author"
@{jleft}@{lindent 3}
@{b}Changelog@{ub}

v1.2
* Vimeo.com script added
* Dailymotion.com script added
* Skaitv.gr script added
* simplem3u8 parser updated to support URLs starting with "../"
* Added links in the AmigaGuide file, that use URLOpen
* Added the silence parameter, that prevents the script to output anything, except the errors or the results of a search
* Documentation updated

v1.1
* Mixer.com script added
* Cleared a lot of code in twitch.py script
* Documentation updated

v1.0
* Initial release
* Twitch.tv script added
* Simple m3u8 parser created

@endnode
@node "Author" "Author"
@prev "Changelog"
@{jleft}@{lindent 3}
@{b}Author@{ub}
My name is George Sokianos and you can reach me at Amiga forums under the username @{b}walkero@{ub}.

The project is open source and you can find the code at:
https://github.com/walkero-gr/aiostreams @{"github" SYSTEM "c:URLOpen https://github.com/walkero-gr/aiostreams"}

If you have any requests or you would like to report any problems you found, you can do that at:
https://github.com/walkero-gr/aiostreams/issues @{"issues" SYSTEM "c:URLOpen https://github.com/walkero-gr/aiostreams/issues"}

You can read my blog at:
https://walkero.gr @{"open" SYSTEM "c:URLOpen https://walkero.gr"}

My Twitter account is:
https://twitter.com/gsokianos @{"open" SYSTEM "c:URLOpen https://twitter.com/gsokianos"}

If you find this project useful, you can support it by donating at:
https://www.paypal.me/gsokianos @{"Donate" SYSTEM "c:URLOpen https://www.paypal.me/gsokianos"}

@endnode
